// lib/presentation/features/home/bloc/home_bloc.dart
import 'package:bloc/bloc.dart';
import 'package:flutter/foundation.dart'; // For @immutable
// If you use Equatable for state/event comparison (optional but good practice)
// import 'package:equatable/equatable.dart';

// Import any domain use cases or repositories if your BLoC interacts with them
// For example:
// import 'package:your_app/domain/usecases/home/get_home_data_usecase.dart';
// import 'package:your_app/domain/entities/home_data_model.dart';

part 'home_event.dart'; // Generated by running build_runner if you use @freezed or similar
part 'home_state.dart';  // Or just manually linked as shown

class HomeBloc extends Bloc<HomeEvent, HomeState> {
  // Inject dependencies (e.g., use cases) if needed
  // final GetHomeDataUseCase _getHomeDataUseCase;

  HomeBloc(/*{required GetHomeDataUseCase getHomeDataUseCase}*/)
      : // _getHomeDataUseCase = getHomeDataUseCase,
        super(HomeInitial()) {
    on<LoadHomeData>(_onLoadHomeData);
    on<RefreshHomeData>(_onRefreshHomeData);
    // Register more event handlers here
  }

  Future<void> _onLoadHomeData(
      LoadHomeData event, Emitter<HomeState> emit) async {
    emit(HomeLoading());
    try {
      // --- Simulate network call or fetch data from a use case ---
      await Future.delayed(const Duration(seconds: 1)); // Simulate delay

      // Example: Fetch data using a use case
      // final result = await _getHomeDataUseCase.execute();
      // result.fold(
      //   (failure) => emit(HomeError(errorMessage: failure.message)),
      //   (data) => emit(HomeLoaded(homeData: data)),
      // );

      // --- Placeholder data for now ---
      emit(HomeLoaded(
        welcomeMessage: "Welcome to Carib Connect!",
        featuredItems: List.generate(5, (index) => "Featured Item ${index + 1}"),
      ));
    } catch (e) {
      emit(HomeError(errorMessage: "Failed to load home data: ${e.toString()}"));
    }
  }

  Future<void> _onRefreshHomeData(
      RefreshHomeData event, Emitter<HomeState> emit) async {
    // Typically, refresh logic is similar to initial loading
    // but might handle UI differently (e.g., showing a refresh indicator
    // without a full screen loader if data is already present).
    // For simplicity here, we'll just call the load logic again.
    await _onLoadHomeData(LoadHomeData(), emit);
  }
}